{"version":3,"sources":["App.module.css","sounds/Shoot2.mp3","sounds/Shoot3.mp3","sounds/main.mp3","sounds/GameOver.mp3","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","App","state","counter","random","score","timer","lifeCount","dead","shooter","main","Audio","gameOver","shoot2","shoot3","musicRun","currentTime","play","randomNum","Math","floor","checkTimer","setState","alert","lifeChecker","onImgClick","render","className","s","wrapper","saloon","doorShooter","doorShooterDisplayNone","doorShooterDead","onClick","leftTopShooter","leftBottomShooter","rightTopShooter","rightBottomShooter","lifes","setInterval","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e2af99bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3TSS6\",\"saloon\":\"App_saloon__3AP3O\",\"dead\":\"App_dead__1DaJJ\",\"doorShooter\":\"App_doorShooter__1JujR\",\"doorShooterDead\":\"App_doorShooterDead__92qiv\",\"doorShooterDisplayNone\":\"App_doorShooterDisplayNone__1dkZN\",\"leftTopShooter\":\"App_leftTopShooter__Ai_AD\",\"leftBottomShooter\":\"App_leftBottomShooter__g5hFh\",\"rightTopShooter\":\"App_rightTopShooter__1Mc1g\",\"rightBottomShooter\":\"App_rightBottomShooter__35l-D\",\"score\":\"App_score__1GJTV\",\"lifes\":\"App_lifes__-jRuN\"};","module.exports = __webpack_public_path__ + \"static/media/Shoot2.44427b3e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Shoot3.73708a65.mp3\";","module.exports = __webpack_public_path__ + \"static/media/main.5f8a0445.mp3\";","module.exports = __webpack_public_path__ + \"static/media/GameOver.1b42057b.mp3\";","import React from 'react';\nimport s from './App.module.css';\nimport shoot2 from './sounds/Shoot2.mp3';\nimport shoot3 from './sounds/Shoot3.mp3';\nimport main from './sounds/main.mp3';\nimport gameOver from './sounds/GameOver.mp3';\n\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        random: 10,\n        score: 'Score',\n        timer: 2,\n        lifeCount: 3,\n        dead: false,\n\n\n        shooter: true\n    };\n\n    main = new Audio(main);\n    gameOver = new Audio(gameOver);\n    shoot2 = new Audio(shoot2);\n    shoot3 = new Audio(shoot3);\n\n    musicRun = () => {\n        this.main.currentTime = 0;\n        this.main.play()\n    };\n\n\n    randomNum = () => Math.floor(Math.random() * 2);\n\n    checkTimer =()=>{\n        if(this.state.timer === 0){\n            this.setState({lifeCount: this.state.lifeCount -1, random: 10, dead: true});\n            alert(\"Ты умер, продолжить?\");\n        }\n    };\n\n    lifeChecker= ()=>{\n        if(this.state.lifeCount === 0){\n            this.gameOver.play();\n        }\n    };\n\n    onImgClick = () => {\n        this.shoot2.play();\n        this.shoot3.play();\n        this.shoot2.currentTime = 0;\n        this.shoot3.currentTime = 0;\n        let score = 100;\n        if (this.state.score === 'Score') {\n            this.setState({score: score, random: 10, timer: 2, dead: false, shooter: false})\n        } else {\n            this.setState({score: this.state.score + score, random: 10, timer: 2, dead:false, shooter: false})\n        }\n\n    };\n\n    componentDidMount() {\n        setInterval(() => {\n            this.setState({random: this.randomNum(), shooter: true})\n        }, 2000);\n        // setInterval(this.musicRun, 6700);\n        setInterval(() => {\n            console.log(this.state.timer);\n            this.checkTimer();\n            this.lifeChecker();\n            this.setState({timer: this.state.timer - 1})\n        }, 1000);\n\n\n    }\n\n\n    render = () => {\n        return (\n            <div className={s.wrapper}>\n                <div className={`${s.saloon} ${this.state.dead === true ? s.dead : ''}`}>\n                    <div className={`${s.doorShooter}\n                     ${this.state.random === 0 ? '' : s.doorShooterDisplayNone} \n                    ${this.state.shooter === false ? s.doorShooterDisplayNone : ''}\n                    ${this.state.shooter === false ? s.doorShooterDead : ''}\n                    ` }\n                         onClick={this.onImgClick}/>\n                    <div className={`${s.leftTopShooter} ${this.state.random === 1 ? '' : s.doorShooterDisplayNone}`}\n                         onClick={this.onImgClick}/>\n                    <div className={`${s.leftBottomShooter} ${this.state.random === 2 ? '' : s.doorShooterDisplayNone}`}\n                         onClick={this.onImgClick}/>\n                    <div\n                        className={`${s.rightTopShooter} ${this.state.random === 3 ? '' : s.doorShooterDisplayNone}`}\n                        onClick={this.onImgClick}/>\n                    <div\n                        className={`${s.rightBottomShooter} ${this.state.random === 4 ? '' : s.doorShooterDisplayNone}`}\n                        onClick={this.onImgClick}/>\n                    <div className={s.score}>{this.state.score}</div>\n                </div>\n                <div className={s.lifes}>\n                   life {this.state.lifeCount}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}